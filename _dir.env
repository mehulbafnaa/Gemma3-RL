#!/bin/bash

# create_directory_structure.sh
# Script to create the refactored GRPO training project directory structure

# Color codes for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}Creating GRPO project directory structure...${NC}"

# Create main project directory
PROJECT_DIR="gemma-grpo"
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR

# Create root-level files
touch pyproject.toml
touch README.md
touch LICENSE
touch .gitignore

# Create main directories
echo -e "${BLUE}Creating main directories...${NC}"
mkdir -p configs/{model,training,experiments}
mkdir -p assets/{pretrained/gemma3-4b,data/images}
mkdir -p scripts
mkdir -p notebooks
mkdir -p tests/{unit,integration,fixtures}
mkdir -p src/gemma_grpo/{core,models,data/{datasets,pipelines},algorithms/grpo,rewards,trainers,utils,cli}

# Create all files in one go
echo -e "${BLUE}Creating all files...${NC}"

# Create __init__.py files
find src -type d -exec touch {}/__init__.py \;
find tests -type d -exec touch {}/__init__.py \;

# Create core module files
touch src/gemma_grpo/core/{config.py,types.py,registry.py}

# Create model module files
touch src/gemma_grpo/models/{base.py,gemma.py,multimodal.py}

# Create data module files
touch src/gemma_grpo/data/datasets/{base.py,mathvista.py}
touch src/gemma_grpo/data/pipelines/{tf_pipeline.py,jax_pipeline.py}
touch src/gemma_grpo/data/preprocessing.py

# Create algorithm module files
touch src/gemma_grpo/algorithms/generation.py
touch src/gemma_grpo/algorithms/grpo/{core.py,kl_divergence.py,optimizer.py}

# Create reward module files
touch src/gemma_grpo/rewards/{base.py,mathvista_reward.py,simple_reward.py}

# Create trainer module files
touch src/gemma_grpo/trainers/{base_trainer.py,grpo_trainer.py}

# Create utils module files
touch src/gemma_grpo/utils/{checkpointing.py,logging.py,metrics.py}

# Create CLI module files
touch src/gemma_grpo/cli/{train.py,evaluate.py}

# Create test files
touch tests/conftest.py
touch tests/unit/{test_grpo.py,test_kl_divergence.py,test_rewards.py}
touch tests/integration/{test_training_pipeline.py,test_multimodal_inference.py}
touch tests/fixtures/{test_batch_image.png,mathvista_generation_results.json}

# Create config files
touch configs/model/{gemma3_4b.yaml,gemma3_12b.yaml}
touch configs/training/{grpo_base.yaml,grpo_mathvista.yaml}
touch configs/experiments/mathvista_gemma3_4b.yaml

# Create script files
touch scripts/{setup_env.sh,train.sh,evaluate.sh,download_model.sh}
chmod +x scripts/*.sh

# Create notebooks
touch notebooks/exploration.ipynb

# Create asset files
touch assets/pretrained/{download.sh,tokenizer.model}
chmod +x assets/pretrained/download.sh

echo -e "${GREEN}Project structure created successfully!${NC}"

# Display the structure if tree is available
if command -v tree &> /dev/null; then
    echo -e "\n${GREEN}Directory structure:${NC}"
    tree -a -I '__pycache__|.git'
else
    echo -e "\n${GREEN}Structure created. Install 'tree' command to visualize.${NC}"
fi
